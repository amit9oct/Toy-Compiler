/*
**************************************
*  Batch Number: 9
*  Amitayush Thakur 2012B4A7819P
**************************************
*/
#ifndef SYMBOL_TABLE_H
#define SYMBOL_TABLE_H
#include "hash.h"
#include "lexer.h"
#include "ast.h"

#define MAX_RECORD_LEN 30
#define REAL_WIDTH 8
#define INT_WIDTH 4
#define HASH_TABLE_SIZE 61
#define HASH_ALPHA 0.75


/*
********************************************************************************************
* Type:
*	This enumerated data type is used to store the type of the identifier used in user code.
********************************************************************************************
*/
typedef enum type{
	INT,
	REAL,
	RECORD
}Type;


/*
********************************************************************************************
* FieldList:
*	This is linked list used to store the fields of a record type.
********************************************************************************************
*/
typedef struct fieldlist{
	Type type;
	int width;
	int offset;
	Token* token;
	struct fieldlist* next;
}FieldList;



/*
********************************************************************************************
* RecordNode:
*	This structure is used for storing records and the fields associated with it.
********************************************************************************************
*/
typedef struct recordnode{
	Token* recTok;
	FieldList* fields;
	int width;
}RecordNode;



/*
********************************************************************************************
* VariableNode:
*	This structure is used for storing the varibale (identifier) information.
********************************************************************************************
*/
typedef struct variablenode{
	Token* varTok;
	Token* funTok;
	int isGlobal;
	RecordNode* recordPtr;
	Type type;
	int width;
	int offset;
	int isAssigned;
}VariableNode;


/*
********************************************************************************************
* InputPar:
*	This is linked list used to store the input parameters of a function.
********************************************************************************************
*/
typedef struct inputPar{
	Token* token;
	struct inputPar* next;
}InputPar;


/*
********************************************************************************************
* OutputPar:
*	This is linked list used to store the output parameters of a function.
********************************************************************************************
*/
typedef struct outputPar{
	Token* token;
	struct outputPar* next;
}OutputPar;



/*
********************************************************************************************
* FunctionNode:
*	This structure is used for storing the function information along with its input and output
*	parameters.
********************************************************************************************
*/
typedef struct functionnode{
	Token* funTok;
	InputPar* inputPar;
	OutputPar* outputPar;
	int width;
	int tempCount;
	int timeStamp;
}FunctionNode;



/*
********************************************************************************************
* SymbolTable:
*	This is a hash table used for storing the identifiers and their information.
********************************************************************************************
*/
typedef struct symboltable{
	HashTable* hashTable; 
}SymbolTable;

extern int GLOBAL_WIDTH;
extern SymbolTable SYMBOL_TABLE;
extern SymbolTable RECORD_TABLE;
extern SymbolTable FUNCTION_TABLE;
extern int FUNCTION_TIME_STAMP;

/*
********************************************************************************************************
*	check:
*		root : It is of type ASTNode* which is the root of AST generated by the AST module.
*	This function calls all appropriate modules including populate symbol table,populate function table
*	and populate record table.
********************************************************************************************************
*/
void check(ASTNode* root);
inline RecordNode* createRecNode(FieldList* fields,Token* token);
inline VariableNode* createVarNode(Token* varTok,Token* funTok,Token* typeToken,Type type,int isGlobal,int* offset);

#endif